xquery version "3.1";

module namespace app="http://bdn-edition.de/intermediate_format/templates";
declare namespace tei = "http://www.tei-c.org/ns/1.0";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://bdn-edition.de/intermediate_format/config" at "config.xqm";
import module namespace presentation="http://bdn-edition.de/intermediate_format/presentation" at "presentation/presentation.xqm";
import module namespace pre="http://bdn.edition.de/intermediate_format/preprocessing" at "intermediate_format/preprocessing.xqm";
import module namespace ident = "http://bdn.edition.de/intermediate_format/identification" at "intermediate_format/identification.xqm";

(:~
 : This is a sample templating function. It will be called by the templating module if
 : it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
 : The function has to take 2 default parameters. Additional parameters are automatically mapped to
 : any matching request or function parameter.
 : 
 : @param $node the HTML node with the attribute which triggered this call
 : @param $model a map containing arbitrary data - used to pass information between template calls
 :)
declare function app:test($node as node(), $model as map(*)) {
    <p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
        function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};


declare 
    %templates:wrap
    %templates:default("doc", "/db/apps/interformat/data/samples/samples4.xml")
function app:present($node as node(), $model as map(*), $doc) {
    <div class="serialisation">
        {   
            let $nodes := doc($doc)
            let $preprocessed-data := pre:preprocessing($nodes/tei:TEI)
            let $intermediate-format := ident:walk($preprocessed-data, ())
            return
                presentation:tei-body($intermediate-format)
        }
    </div>
};


declare 
    %templates:wrap
    %templates:default("doc", "/db/apps/interformat/data/samples/samples4.xml")
function app:tei-metadata($node as node(), $model as map(*), $doc) {
    let $tei-header := doc($doc)//tei:teiHeader
    return
        <div class="metadata">
            <div class="value">
                <div><strong>uri:</strong></div>
                <div>{ base-uri(doc($doc)) }</div>
            </div>
            {presentation:tei-header($tei-header)}
        </div>
};